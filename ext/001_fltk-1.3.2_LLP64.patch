diff -c fltk-1.3.2/FL_org/Fl_Menu_Item.H fltk-1.3.2/FL/Fl_Menu_Item.H
*** fltk-1.3.2/FL_org/Fl_Menu_Item.H	Tue Jul 19 13:49:30 2011
--- fltk-1.3.2/FL/Fl_Menu_Item.H	Thu Oct 16 11:35:15 2014
***************
*** 240,246 ****
      for the menu item's callback function.
      \see Fl_Callback_p Fl_MenuItem::callback() const
     */
!   void callback(Fl_Callback1*c, long p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)p;}
  
    /**
      Gets the user_data() argument that is sent to the callback function.
--- 240,246 ----
      for the menu item's callback function.
      \see Fl_Callback_p Fl_MenuItem::callback() const
     */
!   void callback(Fl_Callback1*c, intptr_t p=0) {callback_=(Fl_Callback*)c; user_data_=(void*)p;}
  
    /**
      Gets the user_data() argument that is sent to the callback function.
***************
*** 256,262 ****
      argument.  This method casts the stored userdata() argument to long
      and returns it as a \e long value.
    */
!   long argument() const {return (long)(fl_intptr_t)user_data_;}
    /**
      Sets the user_data() argument that is sent to the callback function.
      For convenience you can also define the callback as taking a long
--- 256,262 ----
      argument.  This method casts the stored userdata() argument to long
      and returns it as a \e long value.
    */
!   intptr_t argument() const {return (intptr_t)user_data_;}
    /**
      Sets the user_data() argument that is sent to the callback function.
      For convenience you can also define the callback as taking a long
***************
*** 264,270 ****
      and stores it in the menu item's userdata() member.
      This may not be portable to some machines.
    */
!   void argument(long v) {user_data_ = (void*)v;}
  
    /** Gets what key combination shortcut will trigger the menu item. */
    int shortcut() const {return shortcut_;}
--- 264,270 ----
      and stores it in the menu item's userdata() member.
      This may not be portable to some machines.
    */
!   void argument(intptr_t v) {user_data_ = (void*)v;}
  
    /** Gets what key combination shortcut will trigger the menu item. */
    int shortcut() const {return shortcut_;}
***************
*** 388,394 ****
      the callback.
      You must first check that callback() is non-zero before calling this.
    */
!   void do_callback(Fl_Widget* o,long arg) const {callback_(o, (void*)arg);}
  
    // back-compatibility, do not use:
  
--- 388,394 ----
      the callback.
      You must first check that callback() is non-zero before calling this.
    */
!   void do_callback(Fl_Widget* o,intptr_t arg) const {callback_(o, (void*)arg);}
  
    // back-compatibility, do not use:

diff -c fltk-1.3.2/FL_org/glut.H fltk-1.3.2/FL/glut.H
*** fltk-1.3.2/FL_org/glut.H	Sun Apr 22 11:45:09 2012
--- fltk-1.3.2/FL/glut.H	Thu Oct 16 12:03:32 2014
***************
*** 236,242 ****
  #if defined(__LP64__)
    Fl::add_timeout(msec*.001, (void (*)(void *))f, (void *) (long long) value);
  #else
!   Fl::add_timeout(msec*.001, (void (*)(void *))f, (void *)value);
  #endif
  }
  
--- 236,242 ----
  #if defined(__LP64__)
    Fl::add_timeout(msec*.001, (void (*)(void *))f, (void *) (long long) value);
  #else
!   Fl::add_timeout(msec*.001, (void (*)(void *))f, (void *)(intptr_t)value);
  #endif
  }
  
diff -c fltk-1.3.2/FL_org/Fl_Widget.H fltk-1.3.2/FL/Fl_Widget.H
*** fltk-1.3.2/FL_org/Fl_Widget.H	Tue Apr 24 05:12:06 2012
--- fltk-1.3.2/FL/Fl_Widget.H	Thu Oct 16 11:35:08 2014
***************
*** 572,578 ****
        \param[in] cb new callback
        \param[in] p user data
     */
!   void callback(Fl_Callback1*cb, long p=0) {callback_=(Fl_Callback*)cb; user_data_=(void*)p;}
  
    /** Gets the user data for this widget.
        Gets the current user data (void *) argument that is passed to the callback function.
--- 572,578 ----
        \param[in] cb new callback
        \param[in] p user data
     */
!   void callback(Fl_Callback1*cb, intptr_t p=0) {callback_=(Fl_Callback*)cb; user_data_=(void*)p;}
  
    /** Gets the user data for this widget.
        Gets the current user data (void *) argument that is passed to the callback function.
***************
*** 588,600 ****
  
    /** Gets the current user data (long) argument that is passed to the callback function.
     */
!   long argument() const {return (long)(fl_intptr_t)user_data_;}
  
    /** Sets the current user data (long) argument that is passed to the callback function.
        \todo The user data value must be implemented using \em intptr_t or similar
        to avoid 64-bit machine incompatibilities.
     */
!   void argument(long v) {user_data_ = (void*)v;}
  
    /** Returns the conditions under which the callback is called.
  
--- 588,600 ----
  
    /** Gets the current user data (long) argument that is passed to the callback function.
     */
!   intptr_t argument() const {return (intptr_t)user_data_;}
  
    /** Sets the current user data (long) argument that is passed to the callback function.
        \todo The user data value must be implemented using \em intptr_t or similar
        to avoid 64-bit machine incompatibilities.
     */
!   void argument(intptr_t v) {user_data_ = (void*)v;}
  
    /** Returns the conditions under which the callback is called.
  
***************
*** 832,838 ****
        \param[in] arg call the callback with \p arg as the user data argument
        \see callback()
     */
!   void do_callback(Fl_Widget* o,long arg) {do_callback(o,(void*)arg);}
  
    // Causes a widget to invoke its callback function with arbitrary arguments.
    // Documentation and implementation in Fl_Widget.cxx
--- 832,838 ----
        \param[in] arg call the callback with \p arg as the user data argument
        \see callback()
     */
!   void do_callback(Fl_Widget* o,intptr_t arg) {do_callback(o,(void*)arg);}
  
    // Causes a widget to invoke its callback function with arbitrary arguments.
    // Documentation and implementation in Fl_Widget.cxx
diff -c fltk-1.3.2/FL_org/forms.H fltk-1.3.2/FL/forms.H
*** fltk-1.3.2/FL_org/forms.H	Thu Apr  5 14:12:30 2012
--- fltk-1.3.2/FL/forms.H	Thu Oct 16 11:30:04 2014
***************
*** 219,225 ****
    *x = o->x(); *y = o->y();}
  
  typedef void (*Forms_CB)(Fl_Widget*, long);
! inline void fl_set_object_callback(Fl_Widget*o,Forms_CB c,long a) {o->callback(c,a);}
  #define fl_set_call_back      fl_set_object_callback
  inline void fl_call_object_callback(Fl_Widget* o) {o->do_callback();}
  inline void fl_trigger_object(Fl_Widget* o) {o->do_callback();}
--- 219,225 ----
    *x = o->x(); *y = o->y();}
  
  typedef void (*Forms_CB)(Fl_Widget*, long);
! inline void fl_set_object_callback(Fl_Widget*o,Forms_CB c,intptr_t a) {o->callback(c,a);}
  #define fl_set_call_back      fl_set_object_callback
  inline void fl_call_object_callback(Fl_Widget* o) {o->do_callback();}
  inline void fl_trigger_object(Fl_Widget* o) {o->do_callback();}

diff -c fltk-1.3.2/src_org/fl_ask.cxx fltk-1.3.2/src/fl_ask.cxx
*** fltk-1.3.2/src_org/fl_ask.cxx	Sun Apr 22 11:45:09 2012
--- fltk-1.3.2/src/fl_ask.cxx	Thu Oct 16 11:49:43 2014
***************
*** 102,108 ****
  #if defined (__LP64__)
       button[b]->callback(button_cb,(void *)(long long) b);
  #else
!      button[b]->callback(button_cb,(void *)b);
  #endif
     }
   }
--- 102,108 ----
  #if defined (__LP64__)
       button[b]->callback(button_cb,(void *)(long long) b);
  #else
!      button[b]->callback(button_cb,(void *)(intptr_t)b);
  #endif
     }
   }
